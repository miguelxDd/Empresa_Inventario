<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        DB::unprepared("CREATE DEFINER=`root`@`localhost` PROCEDURE `procesar_movimiento_inventario`(
    IN p_movimiento_detalle_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_movimiento_id BIGINT UNSIGNED;
    DECLARE v_producto_id BIGINT UNSIGNED;
    DECLARE v_cantidad DECIMAL(12,4);
    DECLARE v_costo_unitario DECIMAL(12,4);
    DECLARE v_movimiento_tipo VARCHAR(20);
    DECLARE v_bodega_origen BIGINT UNSIGNED;
    DECLARE v_bodega_destino BIGINT UNSIGNED;
    DECLARE v_permite_negativo TINYINT(1);
    DECLARE v_existencia_actual DECIMAL(12,4) DEFAULT 0;
    DECLARE v_costo_actual DECIMAL(12,4) DEFAULT 0;
    DECLARE v_costo_origen DECIMAL(12,4) DEFAULT 0;
    DECLARE v_costo_destino DECIMAL(12,4) DEFAULT 0;
    DECLARE v_nuevo_costo DECIMAL(12,4);
    DECLARE v_nueva_cantidad DECIMAL(12,4);
    DECLARE v_existe_registro INT DEFAULT 0;
    DECLARE v_msg TEXT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

    START TRANSACTION;

    -- Datos del detalle
    SELECT movimiento_id, producto_id, cantidad, costo_unitario
      INTO v_movimiento_id, v_producto_id, v_cantidad, v_costo_unitario
      FROM movimiento_detalles 
     WHERE id = p_movimiento_detalle_id;

    -- Datos del movimiento
    SELECT tipo, bodega_origen_id, bodega_destino_id 
      INTO v_movimiento_tipo, v_bodega_origen, v_bodega_destino
      FROM movimientos 
     WHERE id = v_movimiento_id;

    -- ¿Permite negativo?
    SELECT permite_negativo INTO v_permite_negativo
      FROM productos 
     WHERE id = v_producto_id;

    -- ENTRADA / AJUSTE
    IF v_movimiento_tipo IN ('entrada', 'ajuste') THEN
        SELECT COUNT(*), COALESCE(MAX(cantidad),0), COALESCE(MAX(costo_promedio),0)
          INTO v_existe_registro, v_existencia_actual, v_costo_actual
          FROM existencias 
         WHERE producto_id = v_producto_id 
           AND bodega_id = COALESCE(v_bodega_destino, v_bodega_origen);

        IF v_existe_registro = 0 THEN
            INSERT INTO existencias (producto_id, bodega_id, cantidad, costo_promedio)
            VALUES (v_producto_id, COALESCE(v_bodega_destino, v_bodega_origen), v_cantidad, v_costo_unitario);
        ELSE
            IF v_existencia_actual = 0 THEN
                SET v_nuevo_costo = v_costo_unitario;
            ELSE
                SET v_nuevo_costo = ((v_existencia_actual * v_costo_actual) + (v_cantidad * v_costo_unitario)) / 
                                    (v_existencia_actual + v_cantidad);
            END IF;

            SET v_nueva_cantidad = v_existencia_actual + v_cantidad;

            UPDATE existencias 
               SET cantidad = v_nueva_cantidad, costo_promedio = v_nuevo_costo
             WHERE producto_id = v_producto_id 
               AND bodega_id = COALESCE(v_bodega_destino, v_bodega_origen);
        END IF;

    -- SALIDA
    ELSEIF v_movimiento_tipo = 'salida' THEN
        SELECT COUNT(*), COALESCE(MAX(cantidad),0), COALESCE(MAX(costo_promedio),0)
          INTO v_existe_registro, v_existencia_actual, v_costo_actual
          FROM existencias 
         WHERE producto_id = v_producto_id 
           AND bodega_id = v_bodega_origen;

        IF v_existe_registro = 0 THEN
            INSERT INTO existencias (producto_id, bodega_id, cantidad, costo_promedio)
            VALUES (v_producto_id, v_bodega_origen, 0, 0);
            SET v_existencia_actual = 0;
            SET v_costo_actual = 0;
        END IF;

        IF v_permite_negativo = 0 AND v_existencia_actual < v_cantidad THEN
            SET v_msg = CONCAT('Stock insuficiente. Disponible: ', v_existencia_actual, ', Requerido: ', v_cantidad);
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_msg;
        END IF;

        -- Valorización de salida al costo promedio vigente
        UPDATE movimiento_detalles 
           SET costo_unitario = v_costo_actual, total = v_cantidad * v_costo_actual
         WHERE id = p_movimiento_detalle_id;

        UPDATE existencias 
           SET cantidad = cantidad - v_cantidad
         WHERE producto_id = v_producto_id 
           AND bodega_id = v_bodega_origen;

    -- TRANSFERENCIA
    ELSEIF v_movimiento_tipo = 'transferencia' THEN
        -- Origen
        SELECT COUNT(*), COALESCE(MAX(cantidad),0), COALESCE(MAX(costo_promedio),0)
          INTO v_existe_registro, v_existencia_actual, v_costo_origen
          FROM existencias 
         WHERE producto_id = v_producto_id 
           AND bodega_id = v_bodega_origen;

        IF v_existe_registro = 0 THEN
            INSERT INTO existencias (producto_id, bodega_id, cantidad, costo_promedio)
            VALUES (v_producto_id, v_bodega_origen, 0, 0);
            SET v_existencia_actual = 0;
            SET v_costo_origen = 0;
        END IF;

        IF v_permite_negativo = 0 AND v_existencia_actual < v_cantidad THEN
            SET v_msg = CONCAT('Stock insuficiente para transferencia. Disponible: ', v_existencia_actual, ', Requerido: ', v_cantidad);
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_msg;
        END IF;

        -- El costo del detalle es el costo de origen
        UPDATE movimiento_detalles 
           SET costo_unitario = v_costo_origen, total = v_cantidad * v_costo_origen
         WHERE id = p_movimiento_detalle_id;

        -- Descuento en origen
        UPDATE existencias 
           SET cantidad = cantidad - v_cantidad
         WHERE producto_id = v_producto_id 
           AND bodega_id = v_bodega_origen;

        -- Destino: promedio con su costo actual
        SELECT COUNT(*), COALESCE(MAX(cantidad),0), COALESCE(MAX(costo_promedio),0)
          INTO v_existe_registro, v_existencia_actual, v_costo_destino
          FROM existencias 
         WHERE producto_id = v_producto_id 
           AND bodega_id = v_bodega_destino;

        IF v_existe_registro = 0 THEN
            INSERT INTO existencias (producto_id, bodega_id, cantidad, costo_promedio)
            VALUES (v_producto_id, v_bodega_destino, v_cantidad, v_costo_origen);
        ELSE
            IF v_existencia_actual = 0 THEN
                SET v_nuevo_costo = v_costo_origen;
            ELSE
                SET v_nuevo_costo = ((v_existencia_actual * v_costo_destino) + (v_cantidad * v_costo_origen)) / 
                                    (v_existencia_actual + v_cantidad);
            END IF;

            UPDATE existencias 
               SET cantidad = cantidad + v_cantidad, costo_promedio = v_nuevo_costo
             WHERE producto_id = v_producto_id 
               AND bodega_id = v_bodega_destino;
        END IF;
    END IF;

    COMMIT;
END");
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        DB::unprepared("DROP PROCEDURE IF EXISTS procesar_movimiento_inventario");
    }
};
